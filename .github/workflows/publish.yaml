name: Release

on:
  push:
    tags:
      - v*

permissions: read-all

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
      attestations: write # add slsa attestations
    name: "Build and Publish Release"
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: SET CURRENT_VERSION tag
        run: |
          branchName=$(echo $GITHUB_REF | sed 's/refs\/tags\///' )
          # variable CURRENT_VERSION should not have the "v" used in the branch name
          echo "CURRENT_VERSION=$(echo $branchName | sed 's/v//' )" >> $GITHUB_ENV

      - name: Update local toolchain
        run: |
          rustup update
          rustup component add clippy
          rustup install stable

      - name: Install cargo-deb (generate DEB package)
        run: cargo install cargo-deb

      - name: Install Alien for RPM conversion
        run: |
          sudo apt-get update -y
          sudo apt-get install -y alien dpkg-dev debhelper build-essential

      - name: Run cargo publish libprotonup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # retrieve available versions in crates.io api to skip upload if it was published already
          published_versions=$( curl 'https://crates.io/api/v1/crates/libprotonup' -H 'Accept: */*' |  jq '.versions[].num' )
          exists=false
          if [[ ${published_versions[@]} =~ $CURRENT_VERSION  ]]
          then
            exists=true
          fi
          if ! ( $exists ) ; then
            cargo publish -p libprotonup
          fi

      - name: Run cargo build
        run: cargo build --release

      - name: Run cargo-deb to build a debian package
        run: cargo-deb -p protonup-rs --compress-type gzip --deb-version $CURRENT_VERSION

      - name: Run Alient to convert the DEB package into a RPM package
        run: |
          cd target/debian
          alien -k --to-rpm protonup-rs_${{ env.CURRENT_VERSION }}_amd64.deb
          # move all artifacts to the release folder
          mv *.deb *.rpm ../release/

      - name: Compress binary release artifacts
        run: |
          cd ./target/release
          zip protonup-rs-linux-amd64.zip protonup-rs
          tar -czvf protonup-rs-linux-amd64.tar.gz protonup-rs

      - name: Upload Zipped,Tar gzed, DEB and RPM binaries to release
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd #v2.9.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'target/release/protonup-rs**.{gz,zip,rpm,deb}'
          tag: v${{ env.CURRENT_VERSION }}
          overwrite: true
          file_glob: true
          draft: true

      - name: Upload installer script
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd #v2.9.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'protonup-rs-install.desktop'
          tag: v${{ env.CURRENT_VERSION }}
          overwrite: true
          file_glob: true
          draft: true

      - name: Run cargo publish binary
        env:
          # This can help you tagging the github repository
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # This can help you publish to crates.io
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # retrieve available versions in crates.io api to skip upload if it was published already
          published_versions=$( curl 'https://crates.io/api/v1/crates/Protonup-rs'  -H 'Accept: */*' |  jq '.versions[].num' )
          exists=false
          if [[ ${published_versions[@]} =~ $(echo $CURRENT_VERSION | sed 's/v//' )  ]]
          then
            exists=true
          fi
          if ! ( $exists ) ; then
            cargo publish -p protonup-rs
          fi

      # outputs version
      - name: Output Tag Name
        id: published_version
        run: |
          set -euo pipefail
          echo "published_version=v$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

      # Generate the hashes for Provenance
      - name: Generate hashes
        id: hash
        run: |
          cd target/release/
          sha256sum $(echo *.zip *.deb *.rpm *.gz ) | base64 -w0 > sha256sums.txt
          echo "hashes=$(cat sha256sums.txt )" >> "$GITHUB_OUTPUT"

      - name: Upload sha256sums
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd #v2.9.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'target/release/sha256sums.txt'
          tag: v${{ env.CURRENT_VERSION }}
          overwrite: true
          file_glob: true
          draft: true

      - uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
        with:
          subject-path: |
            target/release/protonup-rs*.gz
            target/release/protonup-rs*.zip
            target/release/protonup-rs*.deb
            target/release/protonup-rs*.rpm

  provenance:
    needs: [release]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
      attestations: write # add slsa attestations
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.release.outputs.hashes }}"
      upload-assets: true
      upload-tag-name: ${{ needs.release.outputs.published_version }}
